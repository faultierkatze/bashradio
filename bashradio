#!/bin/bash

# bashradio - simple command line web radio player
# https://github.com/faultierkatze/bashradio
version="2020-03-30"


# parse command line options
case $1 in

# display help message
  "help" | "-help" | "--help" | "-h" | "-?" )
    echo -e ""$(basename $0)" - simple command line web radio player\nVersion: $version\n"
    echo -e "Stations are saved as plain-text files in ./stations, containing one URL per file (the file name doubles as the station name displayed).\nStations can be added or deleted from within the program or by modifying the content of ./stations directly.\n"
    echo -e "Usage:\n  --help - This help message.\n  --player <...> - Specify the player to be used (optional, default is mpv)."
    exit 0
  ;;

# check whether a different player than mpv shall be used
  "--player" )
    player=$2
    echo "using $player for playback"
  ;;

# do nothing in case of no parameters given
  "" )
    player="mpv"
  ;;

# return an error if a parameter is given but not recognized
  * )
    echo "unknown option: $1"
    exit 1
  ;;

esac


# check whether $player is installed
which $player > /dev/null 2>&1
if [[ $? != 0 ]]; then
  echo "$player not found - aborting"
  exit 1
fi

# make sure the working directory is set to the script location
cd "$(dirname $BASH_SOURCE)"

# check whether the ./stations directory exists
if [[ ! -d stations ]]; then
  echo "stations directory not found - aborting"
  exit 1
fi

# check whether the ./stations directory is not empty
if [[ -z "$(ls -A stations)" ]]; then
  echo "stations directory is empty - aborting"
  exit 1
fi


# main program routine
echo -e ""$(basename $0)" - version: $version"
cd stations
station_count="$(ls -1 | wc -l)"
echo "$station_count stations found"
delete=0
IFS=""

while true; do
echo -e "\nEnter station to play - or (q)uit; (a)dd station; (d)elete station"
  select station in *; do

# check whether user wants to quit
    if [[ "$REPLY" = "q" ]]; then
      exit 0
    fi

# station adding routine
    if [[ "$REPLY" = "a" ]]; then
      echo -e "\n"
      read -p "Enter new station name: " new_station
      read -p "Enter new station URL (input is not validated!): " new_url
      echo "$new_url" > $new_station
      echo "Station added"
      break
    fi

# station deletion routine
    if [[ "$REPLY" = "d" ]]; then
      delete=1
      echo -e "\nEnter station to delete:"
      continue
    fi
    if [[ "$delete" = "1" ]]; then
      read -p "Delete $station? This cannot be undone. (y) for yes, anything else to abort. " delete_confirm
        if [[ "$delete_confirm" = "y" ]]; then
          rm $station
          echo "Station deleted."
          delete=0
          break
        fi
      delete=0
      echo "aborted"
      break
    fi

# basic input validation so we don't call mpv with garbage options
    if [[ "$REPLY" -lt 1 ]] || [[ "$REPLY" -gt "$station_count" ]]; then
      continue
    fi

    echo -e "\nStarting $player - return to menu with Ctrl-C\n"
    $player "$(cat $station)"
    break

   done
done
